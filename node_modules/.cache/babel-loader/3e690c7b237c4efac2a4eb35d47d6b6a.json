{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\Desktop\\\\react-crypto-tracker\\\\src\\\\components\\\\Contact.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport './Contact.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Contact = () => {\n  _s();\n\n  const initialFormData = {\n    name: '',\n    email: '',\n    message: ''\n  };\n  const [formData, setFormData] = useState(initialFormData);\n  const [isSubmitted, setIsSubmitted] = useState(false); // Reference to the form element\n\n  const formRef = useRef(null);\n\n  const handleSubmit = event => {\n    event.preventDefault(); // Submit the form data to the JSON server using fetch \n\n    fetch('http://localhost:3000/contacts', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData)\n    }).then(response => response.json()).then(data => {\n      console.log('Form data submitted:', data);\n      setIsSubmitted(true); // Set isSubmitted to true after successful submission\n\n      formRef.current.reset(); // Reset the form fields using form.reset()\n    }).catch(error => {\n      console.error('Error submitting form data:', error); // Optionally, you can show an error message to the user\n    });\n  };\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData(prevFormData => ({ ...prevFormData,\n      [name]: value\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"contact-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Contact Us\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), isSubmitted ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"Your form has been submitted!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n      ref: formRef,\n      onSubmit: handleSubmit,\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        value: formData.name,\n        onChange: handleChange,\n        placeholder: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        name: \"email\",\n        value: formData.email,\n        onChange: handleChange,\n        placeholder: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"message\",\n        value: formData.message,\n        onChange: handleChange,\n        placeholder: \"Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Contact, \"vUd04fghm0VgpmpPxXwDXYXKAvw=\");\n\n_c = Contact;\nexport default Contact;\n\nvar _c;\n\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"sources":["C:/Users/asus/Desktop/react-crypto-tracker/src/components/Contact.js"],"names":["React","useState","useRef","Contact","initialFormData","name","email","message","formData","setFormData","isSubmitted","setIsSubmitted","formRef","handleSubmit","event","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","current","reset","catch","error","handleChange","value","target","prevFormData","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport './Contact.css';\r\n\r\nconst Contact = () => {\r\n  const initialFormData = {\r\n    name: '',\r\n    email: '',\r\n    message: '',\r\n  };\r\n\r\n  const [formData, setFormData] = useState(initialFormData);\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n\r\n  // Reference to the form element\r\n  const formRef = useRef(null);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    // Submit the form data to the JSON server using fetch \r\n    fetch('http://localhost:3000/contacts', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(formData),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log('Form data submitted:', data);\r\n        setIsSubmitted(true); // Set isSubmitted to true after successful submission\r\n        formRef.current.reset(); // Reset the form fields using form.reset()\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error submitting form data:', error);\r\n        // Optionally, you can show an error message to the user\r\n      });\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormData((prevFormData) => ({ ...prevFormData, [name]: value }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"contact-form\">\r\n      <h2>Contact Us</h2>\r\n      {isSubmitted ? (\r\n        <p style={{textAlign: 'center'}}>Your form has been submitted!</p>\r\n      ) : (\r\n        <form ref={formRef} onSubmit={handleSubmit} className=\"form\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={formData.name}\r\n            onChange={handleChange}\r\n            placeholder=\"Name\"\r\n          />\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={formData.email}\r\n            onChange={handleChange}\r\n            placeholder=\"Email\"\r\n          />\r\n          <textarea\r\n            name=\"message\"\r\n            value={formData.message}\r\n            onChange={handleChange}\r\n            placeholder=\"Message\"\r\n          ></textarea>\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n"]},"metadata":{},"sourceType":"module"}